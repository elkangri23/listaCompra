generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id                 String       @id @default(uuid())
  email              String       @unique
  password           String
  nombre             String
  apellidos          String?
  rol                RolUsuario   @default(USUARIO)
  activo             Boolean      @default(true)
  emailVerificado    Boolean      @default(false)
  fechaCreacion      DateTime     @default(now())
  fechaActualizacion DateTime     @updatedAt
  blueprints         Blueprint[]
  invitaciones       Invitacion[]
  listas             Lista[]
  permisos           Permiso[]
  productos          Producto[]

  @@map("usuarios")
}

model Lista {
  id                 String       @id @default(uuid())
  nombre             String
  descripcion        String?
  color              String?
  icono              String?
  activa             Boolean      @default(true)
  fechaCreacion      DateTime     @default(now())
  fechaActualizacion DateTime     @updatedAt
  propietarioId      String
  invitaciones       Invitacion[]
  propietario        Usuario      @relation(fields: [propietarioId], references: [id])
  permisos           Permiso[]
  productos          Producto[]

  @@map("listas")
}

model Producto {
  id                 String     @id @default(uuid())
  nombre             String
  descripcion        String?
  cantidad           Int        @default(1)
  unidad             String?
  precio             Decimal?
  comprado           Boolean    @default(false)
  urgente            Boolean    @default(false)
  fechaCreacion      DateTime   @default(now())
  fechaActualizacion DateTime   @updatedAt
  fechaCompra        DateTime?
  listaId            String
  categoriaId        String?
  creadoPorId        String
  categoria          Categoria? @relation(fields: [categoriaId], references: [id])
  creadoPor          Usuario    @relation(fields: [creadoPorId], references: [id])
  lista              Lista      @relation(fields: [listaId], references: [id], onDelete: Cascade)

  @@map("productos")
}

model Categoria {
  id                 String     @id @default(uuid())
  nombre             String
  descripcion        String?
  color              String?
  icono              String?
  activa             Boolean    @default(true)
  fechaCreacion      DateTime   @default(now())
  fechaActualizacion DateTime   @updatedAt
  tiendaId           String?
  tienda             Tienda?    @relation(fields: [tiendaId], references: [id])
  productos          Producto[]

  @@unique([nombre, tiendaId])
  @@map("categorias")
}

model Tienda {
  id                 String      @id @default(uuid())
  nombre             String      @unique
  direccion          String?
  telefono           String?
  sitioWeb           String?
  activa             Boolean     @default(true)
  fechaCreacion      DateTime    @default(now())
  fechaActualizacion DateTime    @updatedAt
  categorias         Categoria[]

  @@map("tiendas")
}

model Invitacion {
  id              String           @id @default(uuid())
  hash            String           @unique
  email           String
  estado          EstadoInvitacion @default(PENDIENTE)
  fechaCreacion   DateTime         @default(now())
  fechaExpiracion DateTime
  fechaAceptacion DateTime?
  listaId         String
  invitadoPorId   String
  invitadoPor     Usuario          @relation(fields: [invitadoPorId], references: [id])
  lista           Lista            @relation(fields: [listaId], references: [id], onDelete: Cascade)

  @@map("invitaciones")
}

model Permiso {
  id                 String      @id @default(uuid())
  tipo               TipoPermiso
  fechaCreacion      DateTime    @default(now())
  fechaActualizacion DateTime    @updatedAt
  usuarioId          String
  listaId            String
  lista              Lista       @relation(fields: [listaId], references: [id], onDelete: Cascade)
  usuario            Usuario     @relation(fields: [usuarioId], references: [id])

  @@unique([usuarioId, listaId])
  @@map("permisos")
}

model Blueprint {
  id                 String   @id @default(uuid())
  nombre             String
  descripcion        String?
  publico            Boolean  @default(false)
  contenido          Json
  fechaCreacion      DateTime @default(now())
  fechaActualizacion DateTime @updatedAt
  creadoPorId        String
  creadoPor          Usuario  @relation(fields: [creadoPorId], references: [id])

  @@map("blueprints")
}

model OutboxEvent {
  id            String    @id @default(uuid())
  aggregateId   String
  eventType     String
  eventData     Json
  processed     Boolean   @default(false)
  attempts      Int       @default(0)
  aggregateType String
  createdAt     DateTime  @default(now())
  eventContext  Json?
  eventId       String    @unique
  eventVersion  Int       @default(1)
  lastAttemptAt DateTime?
  lastError     String?
  occurredOn    DateTime
  processedAt   DateTime?
  updatedAt     DateTime  @updatedAt

  @@index([processed, createdAt])
  @@index([eventType, processed])
  @@index([aggregateId, aggregateType])
  @@index([occurredOn])
  @@map("outbox_events")
}

enum RolUsuario {
  USUARIO
  ADMIN
}

enum EstadoInvitacion {
  PENDIENTE
  ACEPTADA
  RECHAZADA
  EXPIRADA
}

enum TipoPermiso {
  LECTURA
  ESCRITURA
  ADMIN
}
